import streamlit as st
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
from urllib.parse import quote

# --------- LANGUAGE SUPPORT ---------
LANGUAGES = {
    "English": {
        "title": "ЁЯМ┐ Plant Disease Identifier",
        "upload": "Upload a plant leaf image",
        "predict": "Predict Disease",
        "result": "Predicted Disease:",
        "copy_label": "Predicted Disease (you can copy):",
        "page_select": "Select Page"
    },
    "родрооро┐ро┤рпН": {
        "title": "ЁЯМ┐ родро╛ро╡ро░ роирпЛропрпН роЕроЯрпИропро╛ро│роорпН роХро╛рогрпНрокро╡ро░рпН",
        "upload": "родро╛ро╡ро░ роЗро▓рпИ рокроЯродрпНродрпИропрпЖро▒рпНро▒ро╡рпБроорпН",
        "predict": "роирпЛропрпИропрпИ роХрогро┐роХрпНроХро╡рпБроорпН",
        "result": "роХрогро┐роХрпНроХрокроЯ роирпЛропрпН:",
        "copy_label": "роХрогро┐роХрпНроХрокроЯ роирпЛропрпН (роироХро▓рпЖро▒рпБроХрпНроХро▓ро╛роорпН):",
        "page_select": "рокроХрпНроХродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН"
    },
    "рд╣рд┐рдиреНрджреА": {
        "title": "ЁЯМ┐ рдкреМрдзреЛрдВ рдХреЗ рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреЗрдВ",
        "upload": "рдкреМрдзреЗ рдХреА рдкрддреНрддреА рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "predict": "рд░реЛрдЧ рдХреА рднрд╡рд┐рд╖реНрдпрд╛рд╡рд╛рдиреА рдХрд░реЗрдВ",
        "result": "рдЕрдиреБрдорд╛рдирд┐рдд рд░реЛрдЧ:",
        "copy_label": "рдЕрдиреБрдорд╛рдирд┐рдд рд░реЛрдЧ (рдХрд╛рдкреА рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ):",
        "page_select": "рдкреГрд╖реНрда рдЪреБрдиреЗрдВ"
    }
}

# --------- TRANSLATIONS ---------
TRANSLATIONS = {
    "Pepper__bell___Bacterial_spot": {"родрооро┐ро┤рпН": "рооро┐ро│роХрпБ___рокро╛роХрпНроЯрпАро░ро┐ропро╛ рокрпБро│рпНро│ро┐", "рд╣рд┐рдиреНрджреА": "рдорд┐рд░реНрдЪ___рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ"},
    "Pepper__bell___healthy": {"родрооро┐ро┤рпН": "рооро┐ро│роХрпБ___роЖро░рпЛроХрпНроХро┐ропроорпН", "рд╣рд┐рдиреНрджреА": "рдорд┐рд░реНрдЪ___рд╕реНрд╡рд╕реНрде"},
    "Potato___Early_blight": {"родрооро┐ро┤рпН": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ___роЖро░роорпНрокроорпН роиро┐ро▒роорпН", "рд╣рд┐рдиреНрджреА": "рдЖрд▓реВ___рдЕрд░реНрд▓реА рдмреНрд▓рд╛рдЗрдЯ"},
    "Potato___Late_blight": {"родрооро┐ро┤рпН": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ___родро╛роород роиро┐ро▒роорпН", "рд╣рд┐рдиреНрджреА": "рдЖрд▓реВ___рд▓реЗрдЯ рдмреНрд▓рд╛рдЗрдЯ"},
    "Potato___healthy": {"родрооро┐ро┤рпН": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ___роЖро░рпЛроХрпНроХро┐ропроорпН", "рд╣рд┐рдиреНрджреА": "рдЖрд▓реВ___рд╕реНрд╡рд╕реНрде"},
    "Tomato_Bacterial_spot": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___рокро╛роХрпНроЯрпАро░ро┐ропро╛ рокрпБро│рпНро│ро┐", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ"},
    "Tomato_Early_blight": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЖро░роорпНрок роиро┐ро▒роорпН", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рдЕрд░реНрд▓реА рдмреНрд▓рд╛рдЗрдЯ"},
    "Tomato_Late_blight": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___родро╛роород роиро┐ро▒роорпН", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рд▓реЗрдЯ рдмреНрд▓рд╛рдЗрдЯ"},
    "Tomato_Leaf_Mold": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЗро▓рпИ рокрпВроЮрпНроЪрпИ", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рд▓реАрдл рдореЛрд▓реНрдб"},
    "Tomato_Septoria_leaf_spot": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЪрпЖрокрпНроЯрпЛро░ро┐ропро╛ роЗро▓рпИ рокрпБро│рпНро│ро┐", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рд╕реЗрдкреНрдЯреЛрд░рд┐рдпрд╛ рд▓реАрдл рд╕реНрдкреЙрдЯ"},
    "Tomato_Spider_mites_Two_spotted_spider_mite": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЗро░рогрпНроЯрпБ рокрпБро│рпНро│ро┐ роЪро┐ро▓рпНро▓ро┐ рокрпВроЪрпНроЪро┐", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рд╕реНрдкрд╛рдЗрдбрд░ рдорд╛рдЗрдЯреНрд╕"},
    "Tomato__Target_Spot": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЗро▓роХрпНроХрпБ рокрпБро│рпНро│ро┐", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рдЯрд╛рд░рдЧреЗрдЯ рд╕реНрдкреЙрдЯ"},
    "Tomato__Tomato_YellowLeaf__Curl_Virus": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роороЮрпНроЪро│рпН роЗро▓рпИ роЪрпБро░рпБроХрпНроХроорпН ро╡рпИро░ро╕рпН", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рдкреАрд▓рд╛рдкрди рдкрддреНрддрд╛ рдХрд░реНрд▓ рд╡рд╛рдпрд░рд╕"},
    "Tomato__Tomato_mosaic_virus": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роорпКроЪро╛ропро┐роХрпН ро╡рпИро░ро╕рпН", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рдореЛрдЬрд╝реЗрдХ рд╡рд╛рдпрд░рд╕"},
    "Tomato_healthy": {"родрооро┐ро┤рпН": "родроХрпНроХро╛ро│ро┐___роЖро░рпЛроХрпНроХро┐ропроорпН", "рд╣рд┐рдиреНрджреА": "рдЯрдорд╛рдЯрд░___рд╕реНрд╡рд╕реНрде"}
}

class_names = list(TRANSLATIONS.keys())

@st.cache_resource
def load_model():
    model = models.mobilenet_v2(pretrained=False)
    model.classifier[1] = nn.Linear(model.last_channel, len(class_names))
    model.load_state_dict(torch.load("plant_disease_model.pth", map_location='cpu'))
    model.eval()
    return model

transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# --------- UI ---------
st.set_page_config(page_title="Plant Disease App", layout="centered")
st.sidebar.title("ЁЯМР Language / роорпКро┤ро┐ / рднрд╛рд╖рд╛")
language = st.sidebar.radio("Choose Language", list(LANGUAGES.keys()))
txt = LANGUAGES[language]

st.title(txt["title"])
model = load_model()

uploaded_file = st.file_uploader(txt["upload"], type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption="Uploaded Image", use_container_width=True)

    if st.button(txt["predict"]):
        input_img = transform(image).unsqueeze(0)
        with torch.no_grad():
            outputs = model(input_img)
            probs = torch.nn.functional.softmax(outputs, dim=1)[0]
            top_class = torch.argmax(probs).item()
            predicted_class = class_names[top_class]
            confidence = probs[top_class].item()

        translated = TRANSLATIONS.get(predicted_class, {}).get(language, predicted_class)

        st.success(f"{txt['result']} **{translated}** ({confidence*100:.2f}%)")
        st.text_input(txt["copy_label"], value=translated, key="copy_field")

        st.write("### ЁЯФН Class Probabilities:")
        for i, score in enumerate(probs.tolist()):
            label = TRANSLATIONS.get(class_names[i], {}).get(language, class_names[i])
            st.write(f"{label}: {score*100:.2f}%")

        # ЁЯСЙ REDIRECT LINK TO APP 2
        disease_query = quote(translated)
        redirect_url = f"https://plantdiseaseautoinjectchat.onrender.com?disease={disease_query}"
        st.markdown("#### ЁЯУй Learn more about this disease:")
        st.markdown(f"[ЁЯФЧ Ask AI Expert about **{translated}**]({redirect_url})")
